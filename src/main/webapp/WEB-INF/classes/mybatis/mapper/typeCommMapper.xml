<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="typeComm">
	<!-- 모든 업종(번호, 이름) -->
	<select id="listCategory" resultType="com.sp.app.typeComm.TypeComm">
		SELECT catejobNum, catejobName
		FROM CATEGORYJOB
	</select>
	
	<!-- 업종 대분류의 소분류(번호, 이름): 조건 업종 대분류 코드(String형) -->
	<select id="listJob" resultType="com.sp.app.typeComm.TypeComm" parameterType="String" >
		SELECT c.catejobNum, c.catejobName, jobNum, jobName
		FROM CATEGORYJOB C
		JOIN JOB J ON c.catejobNum = j.catejobNum
		WHERE j.catejobNum = #{catejobNum}
	</select>
	
	<!-- 등록 -->
	<select id="seq" resultType="Long">
		SELECT typeComm_seq.NEXTVAL FROM dual
	</select>

	<insert id="insertTypeComm" parameterType="com.sp.app.typeComm.TypeComm" >
		 INSERT INTO typeComm(num, subject, content,  hitCount, 
		 		regDate, userId, catejobNum, jobNum)
			VALUES (#{num},  #{subject},  #{content} ,#{hitCount},
				 SYSDATE, #{userId}, #{catejobNum}, #{jobNum})
	</insert>
	
	<!-- 파일 -->
	<insert id="insertFile" parameterType="com.sp.app.typeComm.TypeComm">
		INSERT INTO typeCommFile(fileNum, originalFilename ,num, saveFilename,fileSize )
		VALUES (typeCommFile_seq.NEXTVAL, #{originalFilename},#{num},#{saveFilename},#{fileSize} )
	</insert>
	
	<select id="listFile" parameterType="Long" resultType="com.sp.app.typeComm.TypeComm">
		SELECT fileNum, num, saveFilename, originalFilename, fileSize
		FROM typeCommFile
		WHERE num=#{num} 
	 </select>
	
	<select id="readFile" parameterType="Long" resultType="com.sp.app.typeComm.TypeComm">
		SELECT fileNum, num, saveFilename, originalFilename, fileSize
		FROM typeCommFile
	    WHERE fileNum=#{fileNum}      
	</select>
	
	<delete id="deleteFile" parameterType="map">
		DELETE FROM typeCommFile WHERE ${field} = #{num}
	</delete>

  <sql id="where-list">
      <if test="condition=='all' ">
         ( INSTR(subject, #{keyword}) &gt; 0
            OR DBMS_LOB.INSTR(content, #{keyword}) &gt; 0 )
      </if>
      <if test="condition=='subject' ">
         INSTR(subject, #{keyword}) &gt; 0
      </if>
      <if test="condition=='content' ">
         DBMS_LOB.INSTR( content, #{keyword}) &gt; 0 
      </if>
   </sql>
	
	<!-- 데이터 갯수  -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM typeComm t
		JOIN member1 m ON t.userId=m.userId
		<where>
      	 <if test="catejobNum != ''">
      	     catejobNum = #{catejobNum}
      	 </if>
      	 <if test="jobNum != ''">
      	     AND jobNum = #{jobNum}
      	 </if>
         <if test="keyword != null and keyword!=''  ">
            AND <include refid="where-list"/>
         </if>
      </where>
	</select>
	
	<!-- 리스트 -->
	<select id="listTypeComm" parameterType="map" resultType="com.sp.app.typeComm.TypeComm">
		SELECT t.num,subject, t.userId, userName,  hitCount, 
			   TO_CHAR(t.regDate, 'YYYY-MM-DD') regDate, NVL(fileCount, 0) fileCount,
			   NVL(likeCount, 0) likeCount
		FROM typeComm t
		JOIN member1 m ON m.userId=t.userId
		LEFT OUTER JOIN (
			SELECT num, COUNT(*) fileCount FROM typeCommFile
			GROUP BY num
		) f ON t.num=f.num
		 LEFT OUTER JOIN (
         SELECT num, COUNT(*) likeCount FROM typeCommLike
         GROUP BY num
      ) tc ON t.num=tc.num  
       <where>
      	 <if test="catejobNum != ''">
      	     catejobNum = #{catejobNum}
      	 </if>
      	 <if test="jobNum != ''">
      	     AND jobNum = #{jobNum}
      	 </if>
         <if test="keyword != null and keyword!=''  ">
            AND <include refid="where-list"/>
         </if>
      </where>      
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 글보기 -->
	<select id="readTypeComm" parameterType="Long" resultType="com.sp.app.typeComm.TypeComm">
		SELECT num, t.userId, userName, subject, content, TO_CHAR(t.regDate, 'YYYY-MM-DD') regDate, 
			hitCount, t.catejobNum, t.jobNum, catejobName, jobName
		FROM typeComm t
		JOIN member1 m ON t.userId=m.userId
		JOIN categoryjob c ON t.catejobNum = c.catejobNum
		JOIN job j ON t.jobNum = j.jobNum
		WHERE num = #{num}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Long">
		UPDATE typeComm SET hitCount=hitCount+1 WHERE num = #{num}
	</update>
	
	<!-- 이전글 -->
	<select id="preReadTypeComm" parameterType="map" resultType="com.sp.app.typeComm.TypeComm">
		SELECT num, subject
		FROM typeComm t
		JOIN member1 m ON t.userId=m.userId
		<where>
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
			AND (num &gt; #{num})
		</where>
		ORDER BY num ASC
		FETCH FIRST 1 ROWS ONLY
    </select>
    
    <select id="nextReadTypeComm" parameterType="map" resultType="com.sp.app.typeComm.TypeComm">
    	SELECT num, subject
		FROM typeComm t
		JOIN member1 m ON t.userId=m.userId
		<where>
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
			AND (num &lt; #{num})
		</where>
		ORDER BY num DESC
		FETCH FIRST 1 ROWS ONLY
    </select>
    
    <!-- 수정 -->
    <update id="updateTypeComm" parameterType="com.sp.app.typeComm.TypeComm">
    	UPDATE typeComm SET subject=#{subject},
			content=#{content}
		WHERE num=#{num}
    </update>

	<!-- 삭제 -->
	<delete id="deleteTypeComm" parameterType="Long">
		DELETE FROM typeComm WHERE num=#{num}
	</delete>
	
	<!-- 댓글 -->
	<insert id="insertReply" parameterType="com.sp.app.typeComm.Reply">
		INSERT INTO typeCommReply(replyNum, num, userId, content, regDate)
			VALUES (typeCommReply_seq.NEXTVAL, #{num}, #{userId}, #{content}, SYSDATE)
	</insert>	
	
	<select id="listReply" parameterType="map" resultType="com.sp.app.typeComm.Reply">
		SELECT r.replyNum, r.userId, userName, num, content, r.regDate 
		FROM typeCommReply r
		JOIN member1 m ON r.userId = m.userId
		WHERE num=#{num}
		ORDER BY r.replyNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM typeCommReply
		WHERE num=#{num}
	</select>
	
	<delete id="deleteReply" parameterType="map">
		DELETE FROM typeCommReply
		WHERE replyNum = #{replyNum}
	</delete>
	
	<!-- 공감(좋아요) -->
	<!-- 게시 글 좋아요 추가 -->
	<insert id="insertTypeCommLike" parameterType="map">
		INSERT INTO typeCommLike(num, userId) VALUES (#{num}, #{userId})
	</insert>

	<!-- 게시 글 좋아요 삭제 -->
	<delete id="deleteTypeCommLike" parameterType="map">
		DELETE FROM typeCommLike WHERE num = #{num} AND userId = #{userId}
	</delete>
      
	<!-- 게시글 좋아요 개수 -->
	<select id="typeCommLikeCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*) FROM typeCommLike WHERE num=#{num}
	</select>

	<!-- 게시글 좋아요 여부 -->
	<select id="userTypeCommLiked" parameterType="map" resultType="com.sp.app.typeComm.TypeComm">
		SELECT num, userId FROM typeCommLike WHERE num = #{num} AND userId = #{userId}
	</select>
      
	
</mapper>