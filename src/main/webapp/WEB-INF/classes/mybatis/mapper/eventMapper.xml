<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="event">

	<select id="dataCount" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM event e
		JOIN member1 m ON e.userId=m.userId
		WHERE enable = 1 AND <![CDATA[staDate <= SYSDATE]]> AND <![CDATA[endDate >= SYSDATE]]>
	</select>
	
	<select id="disDataCount" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM event e
		JOIN member1 m ON e.userId=m.userId
		WHERE enable = 0 OR staDate &gt; SYSDATE OR endDate &lt; SYSDATE
	</select>

	<insert id="insertEvent" parameterType="com.sp.app.event.Event">
		INSERT INTO event(num, userId, subject, imageFilename, content, reg_date, enable, staDate, endDate)
		VALUES (event_seq.NEXTVAL, #{userId}, #{subject}, #{imageFilename}, #{content}, SYSDATE, #{enable}, TO_DATE(#{staDate}, 'YYYY-MM-DD'), TO_DATE(#{endDate}, 'YYYY-MM-DD'))
	</insert>
	
	<select id="listEvent" parameterType="map" resultType="com.sp.app.event.Event">
		SELECT num, e.userId, userName, subject, imageFilename, TO_CHAR(staDate, 'yyyy.mm.dd') as staDate, TO_CHAR(endDate, 'yyyy.mm.dd') as endDate
		FROM event e
		JOIN member1 m ON e.userId = m.userId
		WHERE enable = 1 AND <![CDATA[staDate <= SYSDATE]]> AND <![CDATA[endDate >= SYSDATE]]>
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="disListEvent" parameterType="map" resultType="com.sp.app.event.Event">
		SELECT num, e.userId, userName, subject, imageFilename, TO_CHAR(staDate, 'yyyy.mm.dd') as staDate, TO_CHAR(endDate, 'yyyy.mm.dd') as endDate
		FROM event e
		JOIN member1 m ON e.userId = m.userId
		WHERE enable = 0 OR staDate &gt; SYSDATE OR endDate &lt; SYSDATE
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="readEvent" parameterType="Long" resultType="com.sp.app.event.Event">
		SELECT e.num, e.userId, userName, subject, imageFilename, content
			, TO_CHAR(staDate, 'yyyy.mm.dd') as staDate, TO_CHAR(endDate, 'yyyy.mm.dd') as endDate, TO_CHAR(reg_date, 'yyyy.mm.dd') as reg_date
		FROM event e
		JOIN member1 m ON e.userId = m.userId
		WHERE e.num = #{num}
	</select>
	
	<select id="preReadEvent" parameterType="map" resultType="com.sp.app.event.Event">
		SELECT num, subject
		FROM event e
		JOIN member1 m ON e.userId=m.userId
		WHERE enable = 1 AND <![CDATA[staDate <= SYSDATE]]> AND <![CDATA[endDate >= SYSDATE]]>
			AND num &gt; #{num}
		ORDER BY num ASC
		FETCH FIRST 1 ROWS ONLY
	</select>

	<select id="nextReadEvent" parameterType="map" resultType="com.sp.app.event.Event">
		SELECT num, subject
		FROM event e
		JOIN member1 m ON e.userId=m.userId
		WHERE enable = 1 AND <![CDATA[staDate <= SYSDATE]]> AND <![CDATA[endDate >= SYSDATE]]>
			AND num &lt; #{num}
		ORDER BY num DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<select id="disPreReadEvent" parameterType="map" resultType="com.sp.app.event.Event">
		SELECT num, subject
		FROM event e
		JOIN member1 m ON e.userId=m.userId
		WHERE enable = 0 OR staDate &gt; SYSDATE OR endDate &lt; SYSDATE
			AND num &gt; #{num}
			AND (<![CDATA[staDate > SYSDATE]]> OR <![CDATA[endDate < SYSDATE]]>)
		ORDER BY num ASC
		FETCH FIRST 1 ROWS ONLY
	</select>

	<select id="disNextReadEvent" parameterType="map" resultType="com.sp.app.event.Event">
		SELECT num, subject
		FROM event e
		JOIN member1 m ON e.userId=m.userId
		WHERE enable = 0 OR staDate &gt; SYSDATE OR endDate &lt; SYSDATE
			AND num &lt; #{num}
			AND (<![CDATA[staDate > SYSDATE]]> OR <![CDATA[endDate < SYSDATE]]>)
		ORDER BY num DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<update id="updateEvent" parameterType="com.sp.app.event.Event">
		UPDATE event SET subject=#{subject}, imageFilename=#{imageFilename},
			content=#{content}, enable = #{enable}, staDate = TO_DATE(#{staDate}, 'YYYY-MM-DD'), endDate = TO_DATE(#{endDate}, 'YYYY-MM-DD')
		WHERE num=#{num}
	</update>
	
	<delete id="deleteEvent" parameterType="Long">
		DELETE FROM event WHERE num = #{num}
	</delete>
	
	<select id="eventLikeCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*) FROM eventLike WHERE num=#{num}
	</select>
	
	<insert id="insertEventLike" parameterType="map">
		INSERT INTO eventLike(num, userId) VALUES (#{num}, #{userId})
	</insert>

	<delete id="deleteEventLike" parameterType="map">
		DELETE FROM eventLike WHERE num = #{num} AND userId = #{userId}
	</delete>
	
	<select id="userEventLiked" parameterType="map" resultType="com.sp.app.event.Event">
		SELECT num, userId FROM eventLike WHERE num = #{num} AND userId = #{userId}
	</select>
</mapper>